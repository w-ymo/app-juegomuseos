/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gf.app.juegomuseos.views;

import com.gf.app.juegomuseos.utils.GameConstants;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 * GUIGregorioFernandez: vista del controlador {@link GregFernandezController}
 * donde se muestran dos botones y se debe escoger cual es de Gregorio
 * Fernandez.
 *
 * @see GregFernandezController
 * 
 * @author priparno
 */
public class GUIGregorioFernandez extends javax.swing.JFrame {

    /**
     * panelTitle: un panel que contiene el titulo.
     */
    private JPanel titlePanel;
    /**
     * panelImagenes: un panel que contiene los botones con las imagenes.
     */
    private JPanel imagesPanel;

    /**
     * images: lista de tipos {@link JButton} que contiene los botones
     * necesarios para el correcto funcionamiento del juego.
     */
    private List<JButton> images = new ArrayList<>();
    /**
     * textTime: es la {@link JLabel} que contendra el cronometro.
     */
    private JLabel textTime;
    /**
     * roundText: es la {@link JLabel} que contendra el numero de rondas.
     */
    private JLabel roundText;
    
    /**
     * Creates new form GUIGregorioFernandez
     */
    public GUIGregorioFernandez() {
        initComponents();
        setFrame();
    }

    /**
     * setFrame: es el metodo principal que coloca en la vista los botones y el
     * titulo.
     */
    private void setFrame() {
        this.setExtendedState(MAXIMIZED_BOTH);
        this.getContentPane().setSize(GameConstants.SCREEN_SIZE);
        this.getContentPane().setLayout(new BorderLayout());
        setTitlePanel();
        setImagePanel();
    }

    /**
     * setTitlePanel: es el metodo que pone en la ventana el titulo y el
     * cronometro.
     */
    private void setTitlePanel() {
        titlePanel = new JPanel(new BorderLayout());
        this.getContentPane().add(titlePanel, BorderLayout.NORTH);
        JLabel title = new JLabel("SELECCIONA LA IMAGEN QUE PERTENECE A GREGORIO FERN√ÅNDEZ");
        textTime = new JLabel();
        roundText = new JLabel();
        roundText.setFont(textTime.getFont().deriveFont(Font.BOLD, 20f));
        textTime.setHorizontalAlignment(SwingConstants.RIGHT);
        title.setFont(this.getFont().deriveFont(Font.BOLD, 24f));
        title.setHorizontalAlignment(SwingConstants.CENTER);
        titlePanel.add(title, BorderLayout.CENTER);
        JPanel extra = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 0));
        extra.add(roundText);
        extra.add(textTime);
        titlePanel.add(extra, BorderLayout.EAST);
    }

    /**
     * setImagePanel: es el metodo que pone en la ventana los botones para
     * posteriormente seleccionarlo.
     */
    private void setImagePanel() {
        imagesPanel = new JPanel(new GridLayout(0, 2));
        this.getContentPane().add(imagesPanel, BorderLayout.CENTER);
        imagesPanel.setSize(this.getContentPane().getWidth(), (int) (this.getContentPane().getHeight() * 0.60));
        initButtonImage();
        for (JButton image : images) {
            imagesPanel.add(image);
        }
    }

    /**
     * initButtonImage: crea los botones.
     */
    private void initButtonImage() {
        for (int i = 0; i < 2; i++) {
            JButton but = new JButton();
            images.add(but);
        }
    }

    //GETTER/SETTER
    /**
     * getImages: devuelve la lista de {@link JButton} donde iran las imagenes.
     *
     * @return una lista de {@link JButton}
     */
    public List<JButton> getImages() {
        return images;
    }

    /**
     * getPanelImages: devuelve el panel {@link JPanel} de los botones.
     *
     * @return un {@link JPanel}
     */
    public JPanel getPanelImages() {
        return imagesPanel;
    }

    /**
     * getTextTime: devuelve el {@link JLabel} del cronometro.
     *
     * @see Crono
     * 
     * @return un {@link JLabel}
     */
    public JLabel getTextTime() {
        return textTime;
    }

    /**
     * getRoundText: devuelve el {@link JLabel} de las rondas.
     * 
     * @return un {@link JLabel}
     */ 
    public JLabel getRoundText() {
        return roundText;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
