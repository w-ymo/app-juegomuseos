/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gf.app.juegomuseos.views;

import com.gf.app.juegomuseos.utils.GameConstants;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.jxmapviewer.JXMapKit;
import org.jxmapviewer.VirtualEarthTileFactoryInfo;
import org.jxmapviewer.viewer.DefaultTileFactory;


/**
 *
 * @author Luis
 */
public class GUIMap extends javax.swing.JFrame {  
    
    private JXMapKit mapKit = new JXMapKit();
    private VirtualEarthTileFactoryInfo info;
    private DefaultTileFactory tileFactory;
    private JPanel infoPanel;
    private JPanel chronoPanel;
    private JLabel textTime;
    private JLabel artworkImage;
    private JLabel artworkLabel;
    private JLabel authorLabel;
    private JButton confirmButton;

    /**
     * Creates new form GUIMap
     */
    public GUIMap() {
            initComponents();
            setFrame();
    }
    
    private void setFrame() {
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.getContentPane().setLayout(new BorderLayout());
        setMapKit();
        setInfoPanel();
        setChronoPanel();
        this.getContentPane().add(mapKit, BorderLayout.CENTER);
        this.getContentPane().add(infoPanel, BorderLayout.WEST);
    }
    
    private void setChronoPanel() {
        chronoPanel = new JPanel(new FlowLayout());
        textTime = new JLabel();
        chronoPanel.add(textTime);
        this.getContentPane().add(chronoPanel, BorderLayout.NORTH);
    }
    
    private void setInfoPanel() {
        infoPanel = new JPanel(new GridLayout(4, 0));
        Font font = new Font(infoPanel.getFont().getName(), Font.BOLD, 15);
        artworkImage = new JLabel();
        artworkLabel = new JLabel();
        authorLabel = new JLabel();
        confirmButton = new JButton("Fijar Pa√≠s");
        artworkLabel.setFont(font);
        authorLabel.setFont(font);
        confirmButton.setFont(font);
        
        artworkLabel.setPreferredSize(new Dimension(artworkImage.getSize().width, (int) (GameConstants.SCREEN_SIZE.height * 0.33)));
        authorLabel.setPreferredSize(new Dimension(artworkImage.getSize().width, (int) (GameConstants.SCREEN_SIZE.height * 0.33)));
        artworkLabel.setHorizontalAlignment((int) CENTER_ALIGNMENT);
        authorLabel.setHorizontalAlignment((int) CENTER_ALIGNMENT);
        
        infoPanel.add(artworkImage);
        infoPanel.add(artworkLabel);
        infoPanel.add(authorLabel);
        infoPanel.add(confirmButton);
    }
    
    private void setMapKit() {
        info = new VirtualEarthTileFactoryInfo(VirtualEarthTileFactoryInfo.HYBRID);
        tileFactory = new DefaultTileFactory(info);
        mapKit.setTileFactory(tileFactory);
        mapKit.setZoom(17);
        mapKit.getMainMap().setOverlayPainter(null);
        mapKit.setBounds(0, -65, GameConstants.SCREEN_SIZE.width, GameConstants.SCREEN_SIZE.height);
    }
    
    public JXMapKit getMapKit() {
        return mapKit;
    }
    
    public void setMapKit(JXMapKit mapKit) {
        this.mapKit = mapKit;
    }
    
    public JPanel getInfoPanel() {
        return infoPanel;
    }
    
    public void setInfoPanel(JPanel infoPanel) {
        this.infoPanel = infoPanel;
    }

    public JLabel getTextTime() {
        return textTime;
    }

    public void setTextTime(JLabel textTime) {
        this.textTime = textTime;
    }
    
    public JLabel getArtworkImage() {
        return artworkImage;
    }
    
    public void setArtworkImage(JLabel artworkImage) {
        this.artworkImage = artworkImage;
    }
    
    public JLabel getArtworkLabel() {
        return artworkLabel;
    }
    
    public void setArtworkLabel(JLabel artworkLabel) {
        this.artworkLabel = artworkLabel;
    }
    
    public JLabel getAuthorLabel() {
        return authorLabel;
    }
    
    public void setAuthorLabel(JLabel authorLabel) {
        this.authorLabel = authorLabel;
    }

    public JButton getConfirmButton() {
        return confirmButton;
    }

    public void setConfirmButton(JButton confirmButton) {
        this.confirmButton = confirmButton;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GUIMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GUIMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GUIMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GUIMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GUIMap().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
